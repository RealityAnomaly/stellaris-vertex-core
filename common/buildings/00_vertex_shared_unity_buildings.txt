building_vertex_outsider_housing = {
	base_buildtime = @b1_time
  icon = building_residence

	category = unity

	potential = {
		exists = owner
		owner = { has_valid_civic = civic_vertex_benevolent_machines }

		OR = {
			owner = { is_ai = no }
			has_upgraded_capital = yes
		}
	}

	destroy_trigger = {
		exists = owner
		OR = {
			owner = {
				NOT = { owner = { has_valid_civic = civic_vertex_benevolent_machines } }
			}
			AND = {
				owner = { is_ai = yes }
				count_owned_pop = { limit = { has_citizenship_type = { type = citizenship_vertex_dependent country = owner } } count <= 20 }
				num_buildings = { type = building_organic_sanctuary value > 3 }
			}
			AND = {
				owner = { is_ai = yes }
				count_owned_pop = { limit = { has_citizenship_type = { type = citizenship_vertex_dependent country = owner } } count <= 40 }
				num_buildings = { type = building_organic_paradise value > 5 }
			}
		}
	}

	# convert_to = {
	# 	building_luxury_residence
	# 	building_communal_housing
	# }

	planet_modifier = {
		job_vertex_dependent_add = 10
	}

	resources = {
		category = planet_buildings
		cost = {
			minerals = @b1_minerals
		}
		upkeep = {
			energy = @b1_upkeep
		}
	}

	triggered_desc = {
		text = job_vertex_dependent_effect_desc
	}

	# upgrades = {
	# 	"building_vertex_outsider_conflux"
	# }

	# We need to cheat here and tell AI that this will probably give some complex output since AI can not evaluate what this building does without the pops which it cant get without the building - chicken and egg
	ai_resource_production = {
		unity = 10
		physics_research = 10
		alloys = 5

		trigger = {
			NOT = { has_building = building_vertex_outsider_housing }
		}
	}

	# Here we try to adress the second issue that the AI cant evaluate the pop job output of the bio trophy given the happiness trigger that was put inplace to guard against players exploiting bio trophies

	#science
	ai_resource_production = {
		unity = 10
		physics_research = 10

		trigger = {
			has_unemployed_pop_of_category = vertex_dependent

			planet_resource_compare = {
				resource = physics_research
				value >= 100
				type = produces
			}
		}
	}

	#alloys
	ai_resource_production = {
		unity = 10
		alloys = 10

		trigger = {
			has_unemployed_pop_of_category = vertex_dependent

			planet_resource_compare = {
				resource = alloys
				value >= 100
				type = produces
			}
		}
	}

	#cgs
	ai_resource_production = {
		unity = 10
		consumer_goods = 10

		trigger = {
			has_unemployed_pop_of_category = vertex_dependent

			planet_resource_compare = {
				resource = consumer_goods
				value >= 100
				type = produces
			}
		}
	}
}
