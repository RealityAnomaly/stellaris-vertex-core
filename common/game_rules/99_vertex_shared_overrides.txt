# PATCH: to prevent citizenship_vertex_dependent from filling drone jobs
can_fill_drone_job = {
	custom_tooltip = DRONE_JOB_TRIGGER
	hidden_trigger = {
		exists = owner
		owner = { is_gestalt = yes }
		is_being_purged = no
		is_enslaved = no
		is_being_assimilated = no

    NOR = {
			has_citizenship_type = { type = citizenship_organic_trophy country = owner }
  		has_citizenship_type = { type = citizenship_vertex_dependent country = owner }
		}
	}
}

#this/root = pop
#checked if job's possible_precalc = can_fill_worker_job
can_fill_worker_job = {
	custom_tooltip = WORKER_JOB_TRIGGER
	hidden_trigger = {
		if = {
			limit = {
				planet = {
					is_planet_class = pc_cosmogenesis_world #Everyone can become a chip slave
				}
			}
			always = yes
		}
		else = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
			exists = owner
			is_being_purged = no
			is_being_assimilated = no
			NOT = { has_citizenship_type = { type = citizenship_organic_trophy country = owner } }
			NAND = {
				has_citizenship_type = { type = citizenship_slavery }
				OR = {
					has_slavery_type = { type = slavery_livestock }
					has_slavery_type = { type = slavery_matrix }
				}
			}
			if = {
				limit = {
					divinity_right_to_work_job_check_trigger_exempt = no
				}
				divinity_right_to_work_job_check_trigger_worker = yes
			}

			### VERTEX PATCH BEGINS
			NOT = { species = { has_species_flag = vertex_species_prohibits_worker_job } }
			### VERTEX PATCH ENDS
		}
	}
}

# Checks if a pop can procreate
# This = Species
# Root = Planet
can_species_procreate = {
	is_sapient = yes
	NOR = {
		has_trait = trait_machine_unit
		has_trait = trait_mechanical
		has_trait = trait_limited_cybernetic
	}
	NAND = {
		root = { has_modifier = slave_colony }
		NOT = { has_citizenship_type = { type = citizenship_slavery country = root.owner } }
	}
	if = {
		limit = {
			has_trait = trait_necrophage
		}
		NOT = {
			root = {
				any_owned_species = {
					has_population_control = { country = root.owner type = no }
					species_can_be_necrophaged = yes
				}
			}
		}
	}
	NOT = { has_species_flag = nivlac_no_procreation }
	NOT = { has_species_flag = vertex_species_prohibits_procreation }
	has_cybernetic_creed_trait = no
}

# Checks if a pop can be assembled
# This = Species
# Root = Planet
can_species_be_assembled = {
	is_sapient = yes
	NOT = {
		has_trait = trait_exd
	}
	NOT = {
		AND = {
			has_trait = trait_mechanical
			root.owner = { is_individual_machine = yes }
		}
	}
	NOT = {
		AND = {
			has_virtual_species_trait = yes
			root.owner = {
				is_fallen_empire = no
				has_active_tradition = tr_virtuality_finish
			}
		}
	}
	OR = {
		AND = {
			is_robotic = yes
			root = {
				check_modifier_value = {
					modifier = planet_pop_assembly_add
					value > 0
				}
				owner = {
					NOT = { has_country_flag = synth_assembly_stopped }
				}
			}
		}
		AND = {
			is_organic_species = yes
			if = {
				limit = {
					root.owner = { is_hive_empire = yes }
				}
				has_trait = trait_hive_mind
			}
			else_if = {
				limit = { has_budding_trait = yes }
				root = {
					any_owned_species = { is_exact_same_species = prevprev }
				}
			}
			else_if = {
				limit = { has_trait = trait_tiyanki }
				root = {
					any_owned_species = { is_exact_same_species = prevprev }
				}
			}
			else_if = {
				limit = {
					OR = {
						has_trait = trait_clone_soldier_infertile
						has_trait = trait_clone_soldier_infertile_full_potential
					}
				}
				root = {
					# Event 'clones.3' should cover this, but extra safety check.
					has_building = building_clone_army_clone_vat
					NOT = {
						check_variable = {
							which = clone_pops_missing
							value = 0
						}
					}
				}
			}
			else = {
				root = {
					OR = {
						has_building = building_clone_vats
						has_modifier = tiyanki_trophy
						owner = { has_modifier = syamelles_curse }
						AND = {
							has_building = building_posthumous_employment_center
							owner = { has_civic = civic_permanent_employment }
						}
						has_planet_flag = can_organic_assemble_flag #for mod compatibility
					}
				}
			}
		}

		# check for our own dedicated flag...
		has_species_flag = vertex_species_can_be_assembled
	}
	has_population_control = {
		type = no
		country = root.owner
	}
}

#species scope, prev has to be either country or something with an owner
species_can_be_necrophaged = {
	NOR = {
		is_archetype = MACHINE
		is_archetype = ROBOT
		is_archetype = PRESAPIENT
		is_same_species = prev.owner_species
		AND = {
			has_slavery_type = { type = slavery_livestock country = prev.owner }
			prev.owner = { is_hive_empire = no }
		}
		has_citizenship_type = { type = citizenship_purge country = prev.owner }
		has_species_flag = vertex_species_cannot_be_necrophaged
	}
	species_has_happiness_with_owner = prev.owner
}

# PATCH: to add check for civic_vertex_benevolent_machines
species_can_live_on_planet = {
	hidden_trigger = {
		exists = root #somehow this appeared in the error log. No idea how!
		NAND = {
			root = { is_planet_class = pc_machine } # true
			NOR = {
				has_trait = trait_machine_unit
				has_trait = trait_mechanical
				AND = {
					has_trait = trait_cybernetic
					exists = root.owner
					root.owner = {
						has_authority = auth_machine_intelligence
						OR = {
							has_civic = civic_machine_assimilator # Assimilator empire
							has_ascension_perk = ap_mechromancy
						}
					}
				}
        AND = {
          exists = root.owner
          root.owner = {
            has_civic = civic_vertex_benevolent_machines
          }
        }
			}
		}
		if = {
			limit = {
				root = { is_planet_class = pc_hive }
			}
			OR = {
				has_trait = trait_hive_mind
				AND = { #Necrophage Hive Mind can have Necrophytes
					exists = root.owner
					root.owner = {
						is_hive_empire = yes
						has_origin = origin_necrophage
						prev = { species_can_be_necrophaged = yes }
					}
				}
			}
		}
	}
	if = {
		limit = {
			exists = root.owner
			root.owner = {
				has_origin = origin_clone_army
			}
			OR = {
				has_trait = trait_clone_soldier_infertile
				has_trait = trait_clone_soldier_infertile_full_potential
			}
		}
		custom_tooltip = {
			fail_text = CLONE_ARMY_FORCE_DECLINE
			root = {
				check_variable = { which = clone_pops_missing value >= 0 }
			}
		}
	}
}

# Root = Pop
# From = Country
# This = Pop
# NOTE: species_has_happiness is also checked for this
pop_has_random_ethics = {
	exists = from
	NOR = {
    AND = {
      has_trait = trait_machine_unit
      from = { has_authority = auth_machine_intelligence }
    }
		has_citizenship_type = {
			country = from
			type = citizenship_organic_trophy
		}
	}
}

# Root = Species
# From = Country
# This = Species
# PATCH: to allow Vertex shard units to have happiness
# species_has_happiness = {
#   NOR = {
#     AND = {
#       has_trait = trait_machine_unit
#       from = { has_authority = auth_machine_intelligence }
#       NAND = {
#         NOT = { has_species_flag = vertex_species_automated_robot }
#         from = { has_country_flag = vertex_machine_intelligence_volitional }
#       }
#     }
#     has_trait = trait_hive_mind
#     can_think = no
#     AND = {
#       has_trait = trait_mechanical
#       OR = {
#         NOT = { exists = from }
#         from = { has_authority = auth_machine_intelligence }
#         from = { NOT = { has_technology = tech_synthetic_workers } }
#         from = { has_policy_flag = ai_outlawed }
#       }
#     }
#     AND = {
#       has_trait = trait_cybernetic
#       exists = from
#       from = {
#         OR = {
#           AND = {
#             has_authority = auth_machine_intelligence
#             has_civic = civic_machine_assimilator # Assimilator empire
#           }
#           AND = {
#             has_authority = auth_democratic
#             has_country_flag = cyber_collectivist
#           }
#         }
#       }
#     }
#   }
# }
